<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mental Gambling</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #121212;
            color: white;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
            overflow: hidden;
        }

        .game-container {
            width: 100%;
            max-width: 800px;
            text-align: center;
            position: relative;
        }

        .title {
            font-size: 36px;
            margin-bottom: 10px;
            text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
        }
        
        .tagline {
            font-size: 18px;
            margin-bottom: 40px;
            color: #aaa;
            font-style: italic;
        }

        #gambleButton {
            background: linear-gradient(135deg, #1e9600, #fff200, #ff0000);
            border: none;
            color: white;
            padding: 20px 60px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 24px;
            margin: 20px 0;
            cursor: pointer;
            border-radius: 50px;
            transition: all 0.3s;
            text-transform: uppercase;
            font-weight: bold;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        #gambleButton:hover {
            transform: scale(1.05);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
        }

        #gambleButton:disabled {
            background: #333;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s ease;
        }

        .modal-overlay.active {
            opacity: 1;
            pointer-events: auto;
        }

        .modal-content {
            background-color: #1e1e1e;
            width: 90%;
            max-width: 700px;
            border-radius: 15px;
            box-shadow: 0 0 30px rgba(255, 255, 255, 0.2);
            padding: 30px;
            position: relative;
            transform: scale(0.8);
            transition: transform 0.3s ease;
        }

        .modal-overlay.active .modal-content {
            transform: scale(1);
        }

        .close-button {
            position: absolute;
            top: 15px;
            right: 15px;
            font-size: 24px;
            color: #aaa;
            cursor: pointer;
            background: none;
            border: none;
            outline: none;
        }

        .close-button:hover {
            color: white;
        }

        .reel-container {
            position: relative;
            height: 120px;
            background-color: #252525;
            overflow: hidden;
            margin: 30px 0;
            border-radius: 10px;
            box-shadow: inset 0 0 15px rgba(0, 0, 0, 0.7);
        }

        .center-marker {
            position: absolute;
            top: 0;
            left: 50%;
            transform: translateX(-50%);
            height: 100%;
            width: 4px;
            z-index: 10;
            background-color: rgba(255, 255, 255, 0.5);
            pointer-events: none;
        }

        .reel {
            position: absolute;
            display: flex;
            transition: transform 4s cubic-bezier(0.15, 0.9, 0.3, 1);
            height: 100%;
            left: -5000px; /* Start far off to the left */
        }

        .rarity-item {
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            width: 180px;
            height: 100%;
            margin-right: 10px;
            font-weight: bold;
            font-size: 22px;
            border-radius: 8px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);
            position: relative;
            overflow: hidden;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .rarity-item.enlarged {
            transform: scale(1.2);
            z-index: 15;
            box-shadow: 0 0 25px rgba(255, 255, 255, 0.5);
        }

        .rarity-percentage {
            font-size: 14px;
            margin-top: 5px;
            opacity: 0.8;
        }

        .common {
            background: linear-gradient(145deg, #656565, #757575);
            color: #eee;
        }

        .uncommon {
            background: linear-gradient(145deg, #388E3C, #4CAF50);
            color: #fff;
        }

        .rare {
            background: linear-gradient(145deg, #1976D2, #2196F3);
            color: #fff;
        }

        .epic {
            background: linear-gradient(145deg, #7B1FA2, #9C27B0);
            color: #fff;
        }

        .legendary {
            background: linear-gradient(145deg, #FFA000, #FFC107);
            color: #000;
        }

        .result-container {
            height: 60px;
            font-size: 28px;
            font-weight: bold;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-top: 20px;
            text-shadow: 0 0 10px rgba(255, 255, 255, 0.4);
        }

        .cooldown-progress {
            width: 100%;
            height: 6px;
            background-color: #333;
            border-radius: 3px;
            margin-top: 20px;
            overflow: hidden;
            position: relative;
        }

        .cooldown-bar {
            height: 100%;
            width: 0%;
            background: linear-gradient(to right, #ff9800, #f44336);
            transition: width linear;
            border-radius: 3px;
        }

        .timer {
            font-size: 16px;
            color: #aaa;
            margin-top: 10px;
        }

        .shine {
            position: absolute;
            top: 0;
            left: -100%;
            width: 50%;
            height: 100%;
            background: linear-gradient(
                to right, 
                rgba(255, 255, 255, 0) 0%,
                rgba(255, 255, 255, 0.2) 50%,
                rgba(255, 255, 255, 0) 100%
            );
            transform: skewX(-25deg);
        }

        .highlight {
            animation: highlight-pulse 1s infinite;
            box-shadow: 0 0 20px;
        }

        @keyframes highlight-pulse {
            0% { box-shadow: 0 0 15px; }
            50% { box-shadow: 0 0 30px; }
            100% { box-shadow: 0 0 15px; }
        }

        @keyframes shine-effect {
            0% { left: -100%; }
            100% { left: 200%; }
        }

        .shine-animation {
            animation: shine-effect 2s infinite;
        }

        .glow-text {
            text-shadow: 0 0 10px;
        }
        
        .action-buttons {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 20px;
            opacity: 0;
            transition: opacity 0.3s ease;
            pointer-events: none;
        }
        
        .action-buttons.visible {
            opacity: 1;
            pointer-events: auto;
        }
        
        .action-button {
            padding: 12px 30px;
            border-radius: 30px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s ease;
            border: none;
            text-transform: uppercase;
            font-size: 16px;
        }
        
        .equip-button {
            background: linear-gradient(to right, #4CAF50, #8BC34A);
            color: white;
        }
        
        .equip-button:hover {
            transform: scale(1.05);
            box-shadow: 0 0 15px rgba(76, 175, 80, 0.5);
        }
        
        .skip-button {
            background: #424242;
            color: #ddd;
        }
        
        .skip-button:hover {
            transform: scale(1.05);
            background: #616161;
        }
        
        .equipped-title {
            margin-top: 30px;
            padding: 15px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 10px;
            font-size: 20px;
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .equipped-title.visible {
            opacity: 1;
        }
        
        .player-info {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.7);
            padding: 10px 20px;
            border-radius: 10px;
            text-align: right;
            max-width: 300px;
        }
        
        .player-title {
            font-weight: bold;
            font-size: 18px;
            margin-bottom: 5px;
        }

        /* Sound toggle button */
        .sound-toggle {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.7);
            padding: 10px;
            border-radius: 50%;
            cursor: pointer;
            font-size: 20px;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }

        .sound-toggle:hover {
            background: rgba(255, 255, 255, 0.2);
        }
    </style>
</head>
<body>
    <div class="game-container">
        <div class="title">Mental Gambling</div>
        <div class="tagline">Gamble your time, and mentality</div>
        <button id="gambleButton">GAMBLE</button>
    </div>
    
    <div class="player-info" id="playerInfo">
        <div>Current Title:</div>
        <div class="player-title" id="currentTitle">None</div>
    </div>

    <div class="modal-overlay" id="modal">
        <div class="modal-content">
            <button class="close-button" id="closeModal">×</button>
            
            <div class="reel-container">
                <div class="center-marker"></div>
                <div class="reel" id="reel"></div>
            </div>
            
            <div class="result-container" id="result">
                Ready to gamble...
            </div>
            
            <div class="action-buttons" id="actionButtons">
                <button class="action-button equip-button" id="equipButton">Equip</button>
                <button class="action-button skip-button" id="skipButton">Skip</button>
            </div>
            
            <div class="equipped-title" id="equippedTitle"></div>
            
            <div class="cooldown-progress">
                <div class="cooldown-bar" id="cooldownBar"></div>
            </div>
            <div class="timer" id="timer"></div>
        </div>
    </div>

    <div class="sound-toggle" id="soundToggle">🔊</div>

    <!-- Audio elements -->
    <audio id="spinSound" preload="auto">
        <source src="https://assets.mixkit.co/active_storage/sfx/361/361-preview.mp3" type="audio/mpeg">
    </audio>
    <audio id="tickSound" preload="auto">
        <source src="https://assets.mixkit.co/active_storage/sfx/270/270-preview.mp3" type="audio/mpeg">
    </audio>
    <audio id="commonSound" preload="auto">
        <source src="https://assets.mixkit.co/active_storage/sfx/209/209-preview.mp3" type="audio/mpeg">
    </audio>
    <audio id="uncommonSound" preload="auto">
        <source src="https://assets.mixkit.co/active_storage/sfx/220/220-preview.mp3" type="audio/mpeg">
    </audio>
    <audio id="rareSound" preload="auto">
        <source src="https://assets.mixkit.co/active_storage/sfx/2/2-preview.mp3" type="audio/mpeg">
    </audio>
    <audio id="epicSound" preload="auto">
        <source src="https://assets.mixkit.co/active_storage/sfx/6/6-preview.mp3" type="audio/mpeg">
    </audio>
    <audio id="legendarySound" preload="auto">
        <source src="https://assets.mixkit.co/active_storage/sfx/1028/1028-preview.mp3" type="audio/mpeg">
    </audio>

    <script>
        const rarities = [
            { name: "Common", class: "common", chance: 60 },
            { name: "Uncommon", class: "uncommon", chance: 25 },
            { name: "Rare", class: "rare", chance: 10 },
            { name: "Epic", class: "epic", chance: 4 },
            { name: "Legendary", class: "legendary", chance: 1 }
        ];

        const reel = document.getElementById('reel');
        const modal = document.getElementById('modal');
        const gambleButton = document.getElementById('gambleButton');
        const closeModalButton = document.getElementById('closeModal');
        const resultDisplay = document.getElementById('result');
        const timerDisplay = document.getElementById('timer');
        const cooldownBar = document.getElementById('cooldownBar');
        const actionButtons = document.getElementById('actionButtons');
        const equipButton = document.getElementById('equipButton');
        const skipButton = document.getElementById('skipButton');
        const equippedTitle = document.getElementById('equippedTitle');
        const currentTitle = document.getElementById('currentTitle');
        const soundToggle = document.getElementById('soundToggle');
        
        // Audio elements
        const spinSound = document.getElementById('spinSound');
        const tickSound = document.getElementById('tickSound');
        const commonSound = document.getElementById('commonSound');
        const uncommonSound = document.getElementById('uncommonSound');
        const rareSound = document.getElementById('rareSound');
        const epicSound = document.getElementById('epicSound');
        const legendarySound = document.getElementById('legendarySound');
        
        let cooldownTime = 4; // Cooldown in seconds
        let cooldownActive = false;
        let timerId = null;
        let spinInProgress = false;
        let currentRarity = null;
        let reelInitialized = false;
        let winningItem = null;
        let soundEnabled = true;
        let centerLineObserver = null;
        let lastPlayedTick = 0;
        
        // Initialize the reel with items
        function initializeReel() {
            // Create many items to ensure smooth scrolling
            const totalItems = 100;
            reel.innerHTML = '';
            
            for (let i = 0; i < totalItems; i++) {
                const randomRarity = getRandomRarity();
                const rarityItem = document.createElement('div');
                rarityItem.className = `rarity-item ${randomRarity.class}`;
                rarityItem.dataset.rarity = randomRarity.name;
                
                const rarityName = document.createElement('div');
                rarityName.textContent = randomRarity.name;
                
                const rarityPercentage = document.createElement('div');
                rarityPercentage.className = 'rarity-percentage';
                rarityPercentage.textContent = `${randomRarity.chance}%`;
                
                const shine = document.createElement('div');
                shine.className = 'shine';
                
                rarityItem.appendChild(rarityName);
                rarityItem.appendChild(rarityPercentage);
                rarityItem.appendChild(shine);
                reel.appendChild(rarityItem);
            }
            
            // Position the reel initially
            reel.style.transform = 'translateX(0)';
            reelInitialized = true;
        }
        
        // Get a random rarity based on the chance percentages
        function getRandomRarity() {
            const rand = Math.random() * 100;
            let cumulativeChance = 0;
            
            for (const rarity of rarities) {
                cumulativeChance += rarity.chance;
                if (rand < cumulativeChance) {
                    return rarity;
                }
            }
            
            // Fallback (should never happen with proper percentages)
            return rarities[0];
        }
        
        // Play sound based on rarity
        function playRaritySound(rarityName) {
            if (!soundEnabled) return;
            
            switch(rarityName) {
                case 'Common':
                    commonSound.currentTime = 0;
                    commonSound.play();
                    break;
                case 'Uncommon':
                    uncommonSound.currentTime = 0;
                    uncommonSound.play();
                    break;
                case 'Rare':
                    rareSound.currentTime = 0;
                    rareSound.play();
                    break;
                case 'Epic':
                    epicSound.currentTime = 0;
                    epicSound.play();
                    break;
                case 'Legendary':
                    legendarySound.currentTime = 0;
                    legendarySound.play();
                    break;
            }
        }
        
        // Play tick sound when an item passes the center line
        function playTickSound() {
            if (!soundEnabled) return;
            
            // Prevent sound overlap by checking time since last play
            const now = Date.now();
            if (now - lastPlayedTick > 150) { // Don't play more often than every 150ms
                tickSound.currentTime = 0;
                tickSound.volume = 0.3;
                tickSound.play();
                lastPlayedTick = now;
            }
        }
        
        // Setup the intersection observer for the center line
        function setupCenterLineObserver() {
            if (centerLineObserver) {
                centerLineObserver.disconnect();
            }
            
            const centerMarker = document.querySelector('.center-marker');
            const reelItems = document.querySelectorAll('.rarity-item');
            
            // Configure the observer to detect when items cross the center line
            const options = {
                root: document.querySelector('.reel-container'),
                rootMargin: '0px',
                threshold: 0.5
            };
            
            centerLineObserver = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting && spinInProgress) {
                        const item = entry.target;
                        
                        // Play tick sound
                        playTickSound();
                        
                        // Briefly enlarge the item
                        item.classList.add('enlarged');
                        
                        // Remove the enlarged class after a short delay
                        setTimeout(() => {
                            item.classList.remove('enlarged');
                        }, 300);
                    }
                });
            }, options);
            
            // Observe all reel items
            reelItems.forEach(item => {
                centerLineObserver.observe(item);
            });
        }
        
        // Open the gambling modal
        function openModal() {
            // Make sure the reel is initialized when opening the modal
            if (!reelInitialized) {
                initializeReel();
            }
            
            modal.classList.add('active');
            
            // Reset UI elements
            resultDisplay.textContent = 'Click GAMBLE to spin!';
            resultDisplay.style.color = 'white';
            resultDisplay.className = 'result-container';
            actionButtons.classList.remove('visible');
            equippedTitle.classList.remove('visible');
            
            // Ensure we have items in the reel
            if (reel.children.length === 0) {
                initializeReel();
            }
            
            // Set up the center line observer
            setTimeout(() => {
                setupCenterLineObserver();
            }, 300);
        }
        
        // Close the gambling modal
        function closeModal() {
            modal.classList.remove('active');
            
            // Reset UI elements
            resultDisplay.textContent = 'Ready to spin!';
            resultDisplay.style.color = 'white';
            resultDisplay.className = 'result-container';
            actionButtons.classList.remove('visible');
            equippedTitle.classList.remove('visible');
            
            // Reset any ongoing animations
            if (winningItem) {
                winningItem.classList.remove('highlight');
                winningItem.classList.remove('enlarged');
                const shine = winningItem.querySelector('.shine');
                if (shine) shine.classList.remove('shine-animation');
                winningItem = null;
            }
            
            // Clean up the intersection observer
            if (centerLineObserver) {
                centerLineObserver.disconnect();
                centerLineObserver = null;
            }
        }
        
        // Animate the reel and determine the result
        function spin() {
            if (spinInProgress || cooldownActive) return;
            
            // Make sure the reel is initialized
            if (!reelInitialized || reel.children.length === 0) {
                initializeReel();
                setTimeout(() => {
                    setupCenterLineObserver();
                }, 100);
            }
            
            spinInProgress = true;
            actionButtons.classList.remove('visible');
            equippedTitle.classList.remove('visible');
            
            // Reset display
            resultDisplay.textContent = "Spinning...";
            resultDisplay.style.color = "white";
            resultDisplay.className = 'result-container';
            
            // Disable the button during spin
            gambleButton.disabled = true;
            
            // Play spin sound
            if (soundEnabled) {
                spinSound.currentTime = 0;
                spinSound.play();
            }
            
            // Determine the result ahead of time
            const resultRarity = getRandomRarity();
            currentRarity = resultRarity;
            
            // Get the width of a single item
            const itemWidth = 190; // 180px width + 10px margin
            
            // Calculate a random position for the result
            const totalWidth = reel.children.length * itemWidth;
            
            // Find a specific item of the desired rarity
            const rarityItems = Array.from(reel.children).filter(
                item => item.dataset.rarity === resultRarity.name
            );
            
            // Choose a random item of the correct rarity
            const targetItem = rarityItems[Math.floor(Math.random() * rarityItems.length)];
            winningItem = targetItem; // Store for later cleanup
            const targetIndex = Array.from(reel.children).indexOf(targetItem);
            
            // Calculate the exact position to stop (center the item in the viewport)
            // Get the width of the modal content
            const modalWidth = document.querySelector('.modal-content').clientWidth;
            const centerOffset = (modalWidth / 2) - (itemWidth / 2);
            
            // For left-to-right motion, we start far left and end with the target centered
            // We want the reel to move FROM left TO right (opposite direction from original)
            const scrollDistance = 3000 + Math.random() * 1000; // Random distance between 3000-4000px
            const startPosition = -5000; // Start far off to the left
            const finalPosition = startPosition + scrollDistance;
            
            // Position the reel far to the left before starting the animation
            reel.style.transition = 'none';
            reel.style.transform = `translateX(${startPosition}px)`;
            
            // Force a reflow to make sure the initial position is applied before starting the animation
            void reel.offsetWidth;
            
            // Animate the reel from left to right
            reel.style.transition = 'transform 4s cubic-bezier(0.15, 0.9, 0.3, 1)';
            reel.style.transform = `translateX(${finalPosition}px)`;
            
            // Update the result after animation is done
            setTimeout(() => {
                spinInProgress = false;
                cooldownActive = true;
                
                if (targetItem) {
                    // Make the winner glow and enlarged
                    targetItem.classList.add('highlight');
                    targetItem.classList.add('enlarged');
                    
                    // Apply shine animation to the winner
                    const shine = targetItem.querySelector('.shine');
                    if (shine) shine.classList.add('shine-animation');
                    
                    // Update result text - make sure we're displaying the correct rarity
                    const displayedRarity = targetItem.dataset.rarity;
                    currentRarity = rarities.find(r => r.name === displayedRarity) || currentRarity;
                    
                    resultDisplay.textContent = `${currentRarity.name}!`;
                    resultDisplay.style.color = getColorForRarity(currentRarity.class);
                    resultDisplay.classList.add('glow-text');
                    
                    // Play appropriate sound for the rarity
                    playRaritySound(currentRarity.name);
                }
                
                // Show action buttons
                actionButtons.classList.add('visible');
                
                // Start the cooldown timer
                startCooldownTimer();
            }, 4000); // Match this with the CSS transition time
        }
        
        function equipTitle() {
            if (!currentRarity) return;
            
            const title = getTitleForRarity(currentRarity.name);
            currentTitle.textContent = title;
            currentTitle.style.color = getColorForRarity(currentRarity.class);
            
            // Play sound when equipping
            if (soundEnabled) {
                const equipSound = document.createElement('audio');
                equipSound.src = "https://assets.mixkit.co/active_storage/sfx/254/254-preview.mp3";
                equipSound.play();
            }
            
            // Close the modal after equipping
            closeModal();
        }
        
        function skipTitle() {
            // Play sound when skipping
            if (soundEnabled) {
                const skipSound = document.createElement('audio');
                skipSound.src = "https://assets.mixkit.co/active_storage/sfx/337/337-preview.mp3";
                skipSound.play();
            }
            
            // Close the modal after skipping
            closeModal();
        }
        
        function getTitleForRarity(rarity) {
            const titles = {
                "Common": [
                    "Novice Gambler", 
                    "Time Waster", 
                    "Mental Patient", 
                    "Average Joe"
                ],
                "Uncommon": [
                    "Mind Dabbler", 
                    "Thoughtful One", 
                    "Time Investor", 
                    "Mental Athlete"
                ],
                "Rare": [
                    "Thought Provoker", 
                    "Mind Master", 
                    "Deep Thinker", 
                    "Time Bender"
                ],
                "Epic": [
                    "Mental Maestro", 
                    "Time Lord", 
                    "Thought Wizard", 
                    "Psyche Champion"
                ],
                "Legendary": [
                    "God of Time", 
                    "Mental Emperor", 
                    "Transcendent Mind", 
                    "Cosmic Thinker"
                ]
            };
            
            const rarityTitles = titles[rarity] || titles["Common"];
            return rarityTitles[Math.floor(Math.random() * rarityTitles.length)];
        }
        
        function getColorForRarity(rarityClass) {
            switch(rarityClass) {
                case 'common': return '#aaaaaa';
                case 'uncommon': return '#4CAF50';
                case 'rare': return '#2196F3';
                case 'epic': return '#9C27B0';
                case 'legendary': return '#FFC107';
                default: return 'white';
            }
        }
        
        function startCooldownTimer() {
            let timeLeft = cooldownTime;
            cooldownBar.style.width = '100%';
            cooldownBar.style.transition = `width ${cooldownTime}s linear`;
            
            updateTimerDisplay(timeLeft);
            
            setTimeout(() => {
                cooldownBar.style.width = '0%';
            }, 50);
            
            timerId = setInterval(() => {
                timeLeft--;
                updateTimerDisplay(timeLeft);
                
                if (timeLeft <= 0) {
                    clearInterval(timerId);
                    cooldownActive = false;
                    gambleButton.disabled = false;
                    timerDisplay.textContent = '';
                }
            }, 1000);
        }
        
        function updateTimerDisplay(time) {
            timerDisplay.textContent = `Ready in ${time}s`;
        }
        
        function toggleSound() {
            soundEnabled = !soundEnabled;
            soundToggle.textContent = soundEnabled ? '🔊' : '🔇';
        }
        
        // Initialize game on load
        window.addEventListener('load', function() {
            initializeReel();
        });
        
        // Add event listeners
        gambleButton.addEventListener('click', function() {
            openModal();
            // Wait a moment for the modal to be fully visible before spinning
            setTimeout(spin, 300);
        });
        
        closeModalButton.addEventListener('click', closeModal);
        equipButton.addEventListener('click', equipTitle);
        skipButton.addEventListener('click', skipTitle);
        soundToggle.addEventListener('click', toggleSound);
        
        // Fix for blank reel issue - ensure reel is initialized on visibility changes
        document.addEventListener('visibilitychange', function() {
            if (!document.hidden && modal.classList.contains('active') && 
                (!reelInitialized || reel.children.length === 0)) {
                initializeReel();
            }
        });
        
        // Additional safeguard against blank reels
        modal.addEventListener('transitionend', function() {
            if (modal.classList.contains('active') && 
                (!reelInitialized || reel.children.length === 0)) {
                initializeReel();
            }
        });
    </script>
</body>
</html>
