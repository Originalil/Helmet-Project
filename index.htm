 <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Mental Gamble</title>
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      background: linear-gradient(145deg, #e0f7ff, #f0f9ff);
      margin: 0;
      padding: 0;
      overflow: hidden;
    }

    .slideshow-container {
      display: flex;
      flex-direction: column;
      height: 100vh;
      width: 100vw;
      justify-content: center;
      align-items: center;
      position: relative;
    }

    .container {
      background: white;
      border-radius: 20px;
      padding: 30px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
      max-width: 600px;
      text-align: center;
      position: relative;
      flex-grow: 1;
      display: flex;
      flex-direction: column;
      justify-content: center;
    }

    h1 {
      margin-bottom: 10px;
      color: #333;
    }

    .tokens {
      font-size: 22px;
      color: #0066cc;
      margin-bottom: 10px;
    }

    .luck-boost {
      font-size: 16px;
      color: #888;
      margin-bottom: 20px;
    }

    .mood-buttons, .challenge-section {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 10px;
      margin-bottom: 20px;
    }

    .button {
      padding: 12px 20px;
      background: #0077ff;
      color: white;
      border: none;
      border-radius: 10px;
      cursor: pointer;
      font-size: 16px;
      transition: background 0.2s ease;
    }

    .button:hover {
      background: #005fcc;
    }

    .button.cooldown {
      background-color: #ff4444 !important;
      cursor: not-allowed;
    }

    .result {
      font-size: 18px;
      margin-top: 10px;
    }

    .quote {
      font-style: italic;
      color: #666;
      margin-top: 5px;
    }

    .challenge-section {
      display: none;
      flex-direction: column;
    }

    .challenge-info {
      color: #c33;
      font-weight: bold;
      margin-bottom: 10px;
    }

    .shop-icon {
      position: absolute;
      top: 20px;
      right: 20px;
      width: 36px;
      height: 36px;
      cursor: pointer;
    }

    .shop-panel {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: rgba(255, 255, 255, 0.95);
      z-index: 10;
      padding: 40px;
      display: none;
      flex-direction: column;
      overflow-y: auto;
      align-items: center;
      justify-content: center;
    }

    .shop-panel h2 {
      margin-bottom: 20px;
    }

    .shop-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      width: 80%;
      padding: 15px;
      margin: 10px 0;
      border-radius: 12px;
      background: #f2f2f2;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      font-size: 18px;
    }

    .shop-item button {
      background: #ffaa00;
      padding: 10px 20px;
      border: none;
      border-radius: 8px;
      color: white;
      font-weight: bold;
      cursor: pointer;
    }

    .shop-item button:hover {
      background: #cc8800;
    }

    .slide {
      display: none;
    }

    .active {
      display: block;
    }

    .nav-buttons {
      position: absolute;
      top: 50%;
      width: 100%;
      display: flex;
      justify-content: space-between;
    }

    .nav-button {
      background: rgba(0, 0, 0, 0.3);
      color: white;
      border: none;
      padding: 10px;
      cursor: pointer;
    }
  </style>
</head>
<!-- Inside <body> replace your script with this version -->
<script>
  const tokensDisplay = document.querySelector('.tokens');
  const resultDisplay = document.querySelector('.result');
  const quoteDisplay = document.querySelector('.quote');
  let tokens = 100;
  let cooldown = false;

  function updateTokensDisplay() {
    tokensDisplay.textContent = `Tokens: ${tokens}`;
  }

  function getRandomQuote(rarity) {
    const quotes = {
      common: ["You win some, you lose some.", "Try again, maybe?"],
      rare: ["Luck is on your side!", "Rare find, nice!"],
      epic: ["EPIC! You defied the odds!", "Unreal pull!"],
      legendary: ["LEGENDARY MOMENT!", "Golden silence breaks!"],
    };
    const rarityQuotes = quotes[rarity] || quotes.common;
    return rarityQuotes[Math.floor(Math.random() * rarityQuotes.length)];
  }

  function getRarity() {
    const rand = Math.random();
    if (rand > 0.995) return 'legendary';
    if (rand > 0.97) return 'epic';
    if (rand > 0.85) return 'rare';
    return 'common';
  }

  function animateRarityRoll(rarity) {
    const rarityColors = {
      common: '#ccc',
      rare: '#4aa3df',
      epic: '#c36fff',
      legendary: 'gold',
    };

    resultDisplay.style.color = rarityColors[rarity];
    resultDisplay.textContent = `Rarity: ${rarity.toUpperCase()}!`;

    quoteDisplay.textContent = getRandomQuote(rarity);
    quoteDisplay.style.color = rarity === 'legendary' ? 'gold' : '#666';

    setTimeout(() => {
      resultDisplay.textContent = '';
      quoteDisplay.textContent = '';
    }, 1500);
  }

  function takeARisk() {
    if (cooldown) return;

    cooldown = true;
    document.getElementById('riskBtn').classList.add('cooldown');

    setTimeout(() => {
      document.getElementById('riskBtn').classList.remove('cooldown');
      cooldown = false;
    }, 1500);

    const rarity = getRarity();
    animateRarityRoll(rarity);

    let change = 0;

    // Reward system logic: high token count means more chance to lose
    const riskFactor = Math.random();
    const tokenPenalty = Math.ceil(Math.random() * tokens * 0.1);
    const tokenGain = Math.ceil(Math.random() * 20 + 10);

    switch (rarity) {
      case 'legendary':
        change = tokenGain * 10;
        break;
      case 'epic':
        change = tokenGain * 4;
        break;
      case 'rare':
        change = tokenGain;
        break;
      case 'common':
        change = -tokenPenalty;
        break;
    }

    tokens += change;
    if (tokens < 0) tokens = 0;

    updateTokensDisplay();
  }

  // Attach risk button event
  document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('riskBtn').addEventListener('click', takeARisk);
    updateTokensDisplay();
  });
</script>


